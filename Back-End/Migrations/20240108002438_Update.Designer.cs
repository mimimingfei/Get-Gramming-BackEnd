// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Back_End.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240108002438_Update")]
    partial class Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Back_End.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("PhotosUrl")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "2nd Floor, Adityam Building, Ulubari, Guwahati",
                            City = "Guwahati",
                            CreateAt = new DateTimeOffset(new DateTime(2023, 9, 11, 21, 12, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Cuisine = "North Indian",
                            Description = "Barbeque Nation is a restaurant that goes above and beyond the unlimited food experience. The brand strives to deliver a great customer experience. So the reinvented BBQ Nation is another step in that direction.",
                            Latitude = 26.168939999999999,
                            Longitude = 91.763351,
                            Name = "Barbeque Nation",
                            PhotosUrl = new List<string> { "https://www.businessinsider.in/photo/81662629/barbeque-nation-ipo-issues-opens-today-should-you-subscribe.jpg" },
                            UserId = 1,
                            Votes = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "94 Murray St, Tanunda, SA",
                            City = "Tanunda",
                            CreateAt = new DateTimeOffset(new DateTime(2023, 11, 11, 21, 12, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Cuisine = "Australian",
                            Description = "Barbeque Nation 2",
                            Latitude = -34.522849999999998,
                            Longitude = 138.96106,
                            Name = "1918 Bistro & Grill",
                            PhotosUrl = new List<string> { "https://media1.agfg.com.au/images/listing/4939/gallery/1918-bistro-grill-12.jpg" },
                            UserId = 10,
                            Votes = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "49289 Us-30, Westport, OR 97016",
                            City = "Clatskanie",
                            CreateAt = new DateTimeOffset(new DateTime(2023, 2, 11, 8, 12, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Cuisine = "American",
                            Description = "Barbeque Nation 3",
                            Latitude = 46.130690000000001,
                            Longitude = -123.37356,
                            Name = "Berry Patch Restaurant",
                            PhotosUrl = new List<string> { "https://media-cdn.tripadvisor.com/media/photo-o/0c/8e/f8/2d/exterior.jpg", "https://img.delicious.com.au/4P8g_XLF/del/2022/02/vibrant-chickpea-burgers-163338-2.jpg" },
                            UserId = 10,
                            Votes = 0
                        },
                        new
                        {
                            Id = 4,
                            Address = "350 Hepburn-Newstead Road, Hepburn Springs, VIC",
                            City = "Hepburn Springs",
                            CreateAt = new DateTimeOffset(new DateTime(2023, 1, 11, 9, 12, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Cuisine = "Italian",
                            Description = "Barbeque Nation 4",
                            Latitude = -37.272765700000001,
                            Longitude = 144.10972509999999,
                            Name = "La Trattoria of Lavandula",
                            PhotosUrl = new List<string> { "https://www.bestrestaurants.com.au/media/s5jpvkl4/2.jpg?width=1200&rnd=132864454952100000", "https://www.lifegate.com/app/uploads/piadina.jpg" },
                            UserId = 10,
                            Votes = 0
                        },
                        new
                        {
                            Id = 5,
                            Address = "135 W. Main Street, Fernley, NV 89408",
                            City = "Fernley",
                            CreateAt = new DateTimeOffset(new DateTime(2023, 1, 6, 11, 12, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Cuisine = "Mexican",
                            Description = "Barbeque Nation 5",
                            Latitude = 39.607551200000003,
                            Longitude = -119.25278640000001,
                            Name = "Jehova es Mi Pastor Tacos y Burritos",
                            PhotosUrl = new List<string> { "https://s3-media0.fl.yelpcdn.com/bphoto/fWCgiPBAAoF_8i-aXxwl9g/l.jpg" },
                            UserId = 10,
                            Votes = 0
                        });
                });

            modelBuilder.Entity("Back_End.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "apinwill0@typepad.com",
                            PasswordHash = "esf043KS",
                            Username = "Arte"
                        },
                        new
                        {
                            Id = 2,
                            Email = "abeed1@ebay.com",
                            PasswordHash = "ES11dsfGR",
                            Username = "Arsfdel"
                        },
                        new
                        {
                            Id = 3,
                            Email = "nsummerskill2@miitbeian.gov.cn",
                            PasswordHash = "SNsuifePX",
                            Username = "Novelia"
                        },
                        new
                        {
                            Id = 4,
                            Email = "bfairholm3@github.com",
                            PasswordHash = "asd%2222",
                            Username = "Beale"
                        },
                        new
                        {
                            Id = 5,
                            Email = "whabeshaw4@merriam-webster.com",
                            PasswordHash = "4857fea645",
                            Username = "Win"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
